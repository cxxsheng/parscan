class Parcel{
  Object[]	readArray(ClassLoader loader);
  <T> T[]	readArray(ClassLoader loader, Class<T> clazz);
  <T> ArrayList<T>	readArrayList(ClassLoader loader, Class<? extends T> clazz);
  ArrayList	readArrayList(ClassLoader loader);
  void	readBinderArray(IBinder[] val);
  void	readBinderList(List<IBinder> list);
  byte[]	readBlob();
  boolean	readBoolean();
  void	readBooleanArray(boolean[] val);
  Bundle	readBundle();
  Bundle	readBundle(ClassLoader loader);
  byte	readByte();
  void	readByteArray(byte[] val);
  void	readCharArray(char[] val);
  double	readDouble();
  void	readDoubleArray(double[] val);
  void	readException();
  void	readException(int code, String msg);
  ParcelFileDescriptor	readFileDescriptor();
  <T, S extends Parcelable> void	readFixedArray(T val, Creator<S> c);
  <T> void	readFixedArray(T val);
  <T, S extends IInterface> void	readFixedArray(T val, Function<IBinder, S> asInterface);
  float	readFloat();
  void	readFloatArray(float[] val);
  HashMap	readHashMap(ClassLoader loader);
  <K, V> HashMap<K, V>	readHashMap(ClassLoader loader, Class<? extends K> clazzKey, Class<? extends V> clazzValue);
  int	readInt();
  void	readIntArray(int[] val);
  <T extends IInterface> void	readInterfaceArray(T[] val, Function<IBinder, T> asInterface);
  <T extends IInterface> void	readInterfaceList(List<T> list, Function<IBinder, T> asInterface);
  void	readList(List outVal, ClassLoader loader);
  <T> void	readList(List<? super T> outVal, ClassLoader loader, Class<T> clazz);
  long	readLong();
  void	readLongArray(long[] val);
  <K, V> void	readMap(Map<? super K, ? super V> outVal, ClassLoader loader, Class<K> clazzKey, Class<V> clazzValue);
  void	readMap(Map outVal, ClassLoader loader);
  <T extends Parcelable> T	readParcelable(ClassLoader loader);
  <T> T	readParcelable(ClassLoader loader, Class<T> clazz);
  <T> T[]	readParcelableArray(ClassLoader loader, Class<T> clazz);
  Parcelable[]	readParcelableArray(ClassLoader loader);
  Creator<?>	readParcelableCreator(ClassLoader loader);
  <T> Creator<T>	readParcelableCreator(ClassLoader loader, Class<T> clazz);
  <T> List<T>	readParcelableList(List<T> list, ClassLoader cl, Class<? extends T> clazz);
  <T extends Parcelable> List<T>	readParcelableList(List<T> list, ClassLoader cl);
  PersistableBundle	readPersistableBundle();
  PersistableBundle	readPersistableBundle(ClassLoader loader);
  Serializable	readSerializable();
  <T> T	readSerializable(ClassLoader loader, Class<T> clazz);
  Size	readSize();
  SizeF	readSizeF();
  <T> SparseArray<T>	readSparseArray(ClassLoader loader);
  <T> SparseArray<T>	readSparseArray(ClassLoader loader, Class<? extends T> clazz);
  SparseBooleanArray	readSparseBooleanArray();
  String	readString();
  void	readStringArray(String[] val);
  void	readStringList(List<String> list);
  IBinder	readStrongBinder();
  <T> void	readTypedArray(T[] val, Creator<T> c);
  <T> void	readTypedList(List<T> list, Creator<T> c);
  <T> T	readTypedObject(Creator<T> c);
  Object	readValue(ClassLoader loader);
  void	writeArray(Object[] val);
  void	writeBinderArray(IBinder[] val);
  void	writeBinderList(List<IBinder> val);
  void	writeBlob(byte[] b);
  void	writeBlob(byte[] b, int offset, int len);
  void	writeBoolean(boolean val);
  void	writeBooleanArray(boolean[] val);
  void	writeBundle(Bundle val);
  void	writeByte(byte val);
  void	writeByteArray(byte[] b);
  void	writeByteArray(byte[] b, int offset, int len);
  void	writeCharArray(char[] val);
  void	writeDouble(double val);
  void	writeDoubleArray(double[] val);
  void	writeException(Exception e);
  void	writeFileDescriptor(FileDescriptor val);
  <T> void	writeFixedArray(T val, int parcelableFlags, int... dimensions);
  void	writeFloat(float val);
  void	writeFloatArray(float[] val);
  void	writeInt(int val);
  void	writeIntArray(int[] val);
  <T extends IInterface> void	writeInterfaceArray(T[] val);
  <T extends IInterface> void	writeInterfaceList(List<T> val);
  void	writeInterfaceToken(String interfaceName);
  void	writeList(List val);
  void	writeLong(long val);
  void	writeLongArray(long[] val);
  void	writeMap(Map val);
  void	writeNoException();
  void	writeParcelable(Parcelable p, int parcelableFlags);
  <T extends Parcelable> void	writeParcelableArray(T[] value, int parcelableFlags);
  void	writeParcelableCreator(Parcelable p);
  <T extends Parcelable> void	writeParcelableList(List<T> val, int flags);
  void	writePersistableBundle(PersistableBundle val);
  void	writeSerializable(Serializable s);
  void	writeSize(Size val);
  void	writeSizeF(SizeF val);
  <T> void	writeSparseArray(SparseArray<T> val);
  void	writeSparseBooleanArray(SparseBooleanArray val);
  void	writeString(String val);
  void	writeStringArray(String[] val);
  void	writeStringList(List<String> val);
  void	writeStrongBinder(IBinder val);
  void	writeStrongInterface(IInterface val);
  <T extends Parcelable> void	writeTypedArray(T[] val, int parcelableFlags);
  <T extends Parcelable> void	writeTypedArrayMap(ArrayMap<String, T> val, int parcelableFlags);
  <T extends Parcelable> void	writeTypedList(List<T> val);
  <T extends Parcelable> void	writeTypedObject(T val, int parcelableFlags);
  <T extends Parcelable> void	writeTypedSparseArray(SparseArray<T> val, int parcelableFlags);
  void	writeValue(Object v);
  IBinder[]	createBinderArray();
  ArrayList<IBinder>	createBinderArrayList();
  boolean[]	createBooleanArray();
  byte[]	createByteArray();
  char[]	createCharArray();
  double[]	createDoubleArray();
  <T, S extends IInterface> T	createFixedArray(Class<T> cls, Function<IBinder, S> asInterface, int... dimensions);
  <T> T	createFixedArray(Class<T> cls, int... dimensions);
  <T, S extends Parcelable> T	createFixedArray(Class<T> cls, Creator<S> c, int... dimensions);
  float[]	createFloatArray();
  int[]	createIntArray();
  <T extends IInterface> T[]	createInterfaceArray(IntFunction<T[]> newArray, Function<IBinder, T> asInterface);
  <T extends IInterface> ArrayList<T>	createInterfaceArrayList(Function<IBinder, T> asInterface);
  long[]	createLongArray();
  String[]	createStringArray();
  ArrayList<String>	createStringArrayList();
  <T> T[]	createTypedArray(Creator<T> c);
  <T> ArrayList<T>	createTypedArrayList(Creator<T> c);
  <T extends Parcelable> ArrayMap<String, T>	createTypedArrayMap(Creator<T> creator);
  <T extends Parcelable> SparseArray<T>	createTypedSparseArray(Creator<T> creator);
  }